services:
  ######################
  # Infrastructure Services
  ######################



  # MySQL Database

  mysql:
    image: mysql:8.0
    ports:
      - "3307:3306"
    command: --server-id=2 --log-bin=mysql-bin --binlog-do-db=pastebin --max_connections=2000
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: pastebin
    volumes:
      - ./database/pastebin_db.sql:/docker-entrypoint-initdb.d/pastebin_db.sql
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-ppassword" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    # Redis for caching
  redis:
    container_name: redis
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning --maxmemory 4gb --maxmemory-policy allkeys-lru --appendonly yes --appendfsync everysec
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy

  # RabbitMQ for message queue
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_CONNS_MAX=1000 # Tăng số lượng kết nối tối đa
      - RABBITMQ_CHANNELS_MAX=1000 # Tăng số lượng kênh tối đa
      - RABBITMQ_TCP_LISTEN_OPTIONS_BACKLOG=128 # Tăng giá trị backlog của kết nối TCP
      - RABBITMQ_LOGS=stdout # Ghi logs ra stdout để dễ dàng theo dõi
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy

  ######################
  # Application Services
  ######################

  # Create Paste Service API - Only handles API requests, caches in Redis, and queues to RabbitMQ
  create-paste-service:
    container_name: create-paste
    build:
      context: ./create-paste-service-go
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - REDIS_HOST=redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - REDIS_CACHE_PASTE_TTL_SECONDS=180
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  create-paste-worker:
    build:
      context: ./create-paste-worker-go
      dockerfile: Dockerfile
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=pastebin
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - NUM_WORKERS=5 # 5 goroutines per container
      - BATCH_SIZE=1000 # Process 1000 pastes per batch
      - BATCH_TIMEOUT_SECS=5 # Flush batch after 3 seconds if not full
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql:
        condition: service_healthy
    restart: unless-stopped

  get-paste-service:
    build:
      context: ./get-paste-service-go
      dockerfile: Dockerfile
    environment:
      - PORT=8082
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=pastebin
      - REDIS_HOST=redis:6379
      - REDIS_PASSWORD=
      - REDIS_CACHE_PASTE_TTL_SECONDS=180
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  get-paste-worker:
    build:
      context: ./get-paste-worker-go
      dockerfile: Dockerfile
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=pastebin
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - NUM_WORKERS=5 # 5 goroutines per container
      - BATCH_SIZE=5000 # Process 500 paste views per batch
      - BATCH_TIMEOUT_SECS=5 # Flush batch after 3 seconds if not full
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  get-public-service:
    container_name: get-public
    build:
      context: ./get-public-service-go
      dockerfile: Dockerfile
    ports:
      - "8079:8079"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=pastebin
      - PORT=8079
    depends_on:
      mysql:
        condition: service_healthy

  get-stats-service:
    container_name: get-stats
    build:
      context: ./get-stats-service-go
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=pastebin
      - REDIS_HOST=redis:6379
      - REDIS_PASSWORD=
      - REDIS_CACHE_STATS_TTL_OTHER_MONTH_SECONDS=60
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Cleanup Expired Service
  cleanup-expired-service:
    container_name: cleanup
    build:
      context: ./cleanup-expired-service-go
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=pastebin
      - CLEANUP_INTERVAL_MINS=0.25
      - PORT=8084
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy

  # Nginx reverse proxy
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./react-ui/build:/usr/share/nginx/html # Mount the built React files
    depends_on:
      - create-paste-service
      - get-paste-service
      - get-public-service
      - get-stats-service
      - cleanup-expired-service
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logging/promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    depends_on:
      - nginx

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - loki-index:/loki/index
      - loki-chunks:/loki/chunks
      - loki-compactor:/loki/compactor
      - ./logging/loki-config.yaml:/etc/loki/loki-config.yaml
    depends_on:
      - promtail

    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - node-exporter

  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    depends_on:
      - prometheus
  locust:
    build:
      context: ./locust
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      - nginx
    command: locust -f locustfile.py

volumes:
  redis_data:
  mysql_data:
  grafana_data:
  loki-index:
  loki-chunks:
  loki-compactor:


